When would you want to use a remote repository rather than keeping all your work local?

    Rather than keeping all my work local, I would want to use a remote repository when I would need to collaborate with other people on any project.
    Remote repository helps everyone connect to a common source files with all recent changes and add their own changes.
    I would also use remote repository if I would like to share my work with others so that I can get any feedback.
    Other people can use my work and change it for their own needs.
    Remote repository also helps if I need to work on the same project from a different computer at a different location.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

    Rather than Git automatically staying up-to-date with my remote repository, I want to always manually pull changes because it helps me evaluate if I need to incorporate the changes on the remote repository into the project.
    Going through the remote repository log if I feel that I would like to try out the changes made to remote repository without affecting my current project, I can always create a branch and then pull changes.
    This also helps in preventing any unwanted changes getting into my project and breaking things.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

    Forks are clones made inside GitHub from existing repositories in GitHub to my account which provides attribution to the original author.
    Forks are used when I want to work on a project I found on GitHub where I don't have permission to make changes but would like to credit the original author.

    Clones are copies of repositories from existing repositories in GitHub to my local machine.
    Clones are used when I want to work on a project I found on GitHub, but don't want to add it to my account on GitHub.
    I can also use cloning when I don't have a GitHub account and want to work on an existing project.
    Cloning is also used for importing any forks done inside GitHub to local computer.

    Branches are copies of existing repository in the local machine.
    Branches are used if I would want to try any experimental features and don't want to impact the main project.
    In the future if I feel that I have finished experimenting with the branch, I can then merge the branch with the main project after resolving any conflicts.

What is the benefit of having a copy of the last known state of the remote stored locally?

    The benefit of having a copy of the last known state of the remote stored
    locally as origin/master is to freely make changes and commiting and have
    a record of how much the current commit history is ahead of the remote.
    Also if there has been any updates to the remote after pull request,
    then the local copy can be compared with any updates to the remote and merged as needed.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

    Without using Git or GitHub, I can collaborate by commparing different versions of files side by side using file comparison techniques.
    Also there are track changes feature in certain document creation softwares that can be used.
    This method is straight forward and simple and I will not have to remember Git or gitHub commands and structure.
    The downside is that I will lose the granular change history and option to revert back changes if something goes wrong.
    All collaborators may not be able to make changes at the same time and they would have to change things in sequence to avoid merge conflict.
    After all changes are made and accepted there is no record of previous versions and changes which are lost forever unless I save a copy at each version change.
    It will be harder to make experimental changes and then merge back to the main as there will be a lot of changes in both versions each of which have to be inspected and approved.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

    I would want to make changes in a separate branch rather than directly in master if I am trying some experimental features and I don't want that to impact the master.
    I would also want to work on a branch if I am working collaboratively on a project and would want to discuss a change with my collaborator using pull request before merging with master.
    The benefit of working directly on master is that I will always have knowledge of changes to the master before making my own changes.
    There is less chance of a conflict if I have a reference to master before making changes.
    Making changes in a branch has its own benefits to be able to ask for opinion using a pull request and cleanly abandon the branch if not required.